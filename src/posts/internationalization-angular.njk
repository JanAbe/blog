---
name: "internationalization-angular"
title: "Add i18n to your Angular app"
description: "Learn how to add i18n localization to your Angular 17 project to support multiple languages."
date: 2024-02-23
layout: "layouts/blog.njk"
templateEngineOverride: njk, md
---

<h2>Create a new Angular project</h2>
Create a new project using the Angular CLI:

```shell
ng new
```

We will use the default base project generated by the CLI as a starting point.

<h2>Add Localize dependency</h2>
Add the angular localize dependency to your project by using the following command:

```shell
ng add @angular/localize
```

<h2>Set default language</h2>
Choose and set the default language of your app.
This is the language in which you will write your code and templates.

Add the following to your angular.json file under the key "projects.\<project-name\>":
```json
{
    ...,
    "projects": {
        "my-project": {
            "i18n": {
                "sourceLocale": "en-US"
            },
        }
    },
    ...
}
```
This will make english the default language of your application.

<h2>Write templates which use i18n</h2>
Navigate to app.component.html and edit the h1 and p tags:

```html
<h1 i18n="@@app.title">Hello, {{ title }}</h1>
<p i18n="@@app.text">Congratulations! Your app is running. ðŸŽ‰</p>
```

With <mark class="highlight">@@</mark> you can give an ID (identifier) to the text you are translating.
This is useful as it will allow you to understand the context of the text when it is written to message.json (as you will see later on in this guide).

I like to use the following naming convention for ID's.
<mark class="highlight">\<component-name + logical description\></mark>

e.g. <mark class="highlight">app.title</mark>

This makes it that the chances of having duplicate ID's is low and it will allow you to understand to which component the text belongs to.

<h2>Generate source file</h2>
Use the following command to extract all text you marked for internationalization:

```shell
ng extract-i18n --format=json --output-path=src/locale
```

This will place the source file named messages.json inside the folder src/locale. It also uses the json format instead of xlf.

<h2>Create a Dutch translation file</h2>
Copy the generated src/locale/messages.json file and call this new file <mark class="highlight">src/locale/messages.nl.json</mark>

Add the following translations to this file:
```json
{
  "locale": "nl-NL",
  "translations": {
    "app.title": "Hallo, {$INTERPOLATION}",
    "app.text": "Gefeliciteerd! Je app draait. ðŸŽ‰"
  }
}
```

Now you can see why giving ID's is a good idea.
We can instantly tell that the first key is the title of the app component.

<h2>Build your app in Dutch and English</h2>
Add the following to your angular.json file to make sure that angular knows where to find the supported translations for the project:

```json
  "projects": {
    "my-project": {
      "i18n": {
        "sourceLocale": "en-US",
        "locales": {
          "nl": {
            "translation": "src/locale/messages.nl.json"
          }
        }
      },
    }
  }
```

Add the following to your angular.json so that angular builds all provided locales:
```json
"architect": {
    "build": {
      "builder": "@angular-devkit/build-angular:application",
      "options": {
        "localize": true,
        ...
```

run
```shell
ng build
```

This will create a dist folder containing all supported locale versions of your app (dutch and english).
If you open dist/my-project/browser/nl/main.js and search for "Gefeliciteerd", you get a hit!

<h2>Serve one locale</h2>
If you want to serve the dutch version of your app during development, add the following config to "architect.build.configurations":

```json
"nl": {
  "localize": ["nl"]
}
```

And add this to "architect.serve.configurations":
```json
"nl": {
  "buildTarget": "my-project:build:development,nl"
}
```

where <mark class="highlight">my-project</mark> is the name of your project.

<h2>Run the app</h2>

```shell
ng serve --configuration=nl --open
```
And voila the website is in dutch now.

<h2>Links</h2>
https://angular.io/guide/i18n-overview